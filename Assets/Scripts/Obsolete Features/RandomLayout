    public void SpawnRoom(float length, float width, float height)
    {
        GameObject StoreFloor;
        GameObject StoreWalls;
        StoreLength = length;
        StoreWidth = width;
        StoreFloor = Instantiate(Floor, new Vector3(length / 2, 0, width / 2), Quaternion.identity);
        StoreFloor.transform.localScale = new Vector3(length/10, 1, width/10);
        //StoreFloor.AddComponent<Floor>();
        //StoreWalls = Instantiate(Walls, new Vector3(length / 2, 0, width / 2), Quaternion.identity);
        //StoreWalls.transform.localScale = new Vector3(length/10, height/10, width/10);
    }

    public void BuildPresetStore(string Preset, int level)
    {
        float ShelfLength;
        float ShelfWidth;
        float ShelfHeight;
        float ShelfThickness;
        float ShelfLengthSide;
        int ShelfLevel;
        switch (Preset)
        {
            case "Debug":
                // 1 shelf for testing
                ShelfLength = 3f;
                ShelfWidth = 0.45f;
                ShelfHeight = 0.4f;
                ShelfThickness = 0.04f;
                ShelfLevel = 4;
                SpawnShelf("Shelf_Debug", 5f/2f, 6f/3f, ShelfLength-(2*(ShelfWidth+ShelfThickness)), ShelfWidth, ShelfHeight, ShelfThickness, ShelfLevel, 90);
                SpawnShelf("Shelf_Debug", 5f/2f, 12f/3f, 0.62f, ShelfWidth, ShelfHeight, ShelfThickness, ShelfLevel, 90, "HingeDoor");
                SpawnShelf("Shelf_Debug", 5f/2f, 18f/3f, ShelfLength-(2*(ShelfWidth+ShelfThickness)), ShelfWidth, ShelfHeight, ShelfThickness, ShelfLevel, 90, "SlidingDoor");
                SpawnRoom(5f, 10f, 3.3f);
                break;
            case "Layout1":
                // 9m x 12m store
                ShelfLength = 4.8f;
                ShelfWidth = 0.45f;
                ShelfHeight = 0.4f;
                ShelfThickness = 0.02f;
                ShelfLevel = 4;
                ShelfLengthSide = (ShelfWidth+ShelfThickness)*2;

                SpawnRoom(9f, 12f, 4f);

                SpawnShelfGroup("SG1", 2.5f, 6, ShelfWidth, ShelfHeight, ShelfThickness, ShelfLevel, ShelfLength, 90, true);
                SpawnShelfGroup("SG2", 5, 6, ShelfWidth, ShelfHeight, ShelfThickness, ShelfLevel, ShelfLength, 90);

                SpawnShelf("Cabinet1", 8.65f, 0.6f, 0.62f, 0.6f, ShelfHeight, ShelfThickness, ShelfLevel, 90, "LeftHingeDoor");
                SpawnShelf("Cabinet2", 8.65f, 1.27f, 0.62f, 0.6f, ShelfHeight, ShelfThickness, ShelfLevel, 90, "RightHingeDoor");
                SpawnShelf("Cabinet3", 8.65f, 1.94f, 0.62f, 0.6f, ShelfHeight, ShelfThickness, ShelfLevel, 90, "LeftHingeDoor");
                SpawnShelf("Cabinet4", 8.65f, 2.61f, 0.62f, 0.6f, ShelfHeight, ShelfThickness, ShelfLevel, 90, "RightHingeDoor");

                SpawnShelf("Shelf5", 8.65f, 7.16f, 0.62f, 0.6f, ShelfHeight, ShelfThickness, ShelfLevel, 90, "LeftHingeDoor", true);
                SpawnShelf("Shelf6", 8.65f, 7.83f, 0.62f, 0.6f, ShelfHeight, ShelfThickness, ShelfLevel, 90, "RightHingeDoor", true);
                SpawnShelf("Shelf7", 8.65f, 8.5f, 0.62f, 0.6f, ShelfHeight, ShelfThickness, ShelfLevel, 90, "LeftHingeDoor");

                SpawnShelf("Shelf8", 1.5f, 11.5f, 1.22f, 0.6f, ShelfHeight, ShelfThickness, ShelfLevel, 0, "SlidingDoor", true);
                SpawnShelf("Shelf9", 4f, 11.5f, 1.22f, 0.6f, ShelfHeight, ShelfThickness, ShelfLevel, 0, "SlidingDoor");
                SpawnShelf("Shelf10", 6.5f, 11.5f, 1.22f, 0.6f, ShelfHeight, ShelfThickness, ShelfLevel, 0, "SlidingDoor");


                break;
            case "1":
                ShelfLength = 4.8f;
                ShelfWidth = 0.45f;
                ShelfHeight = 0.4f;
                break;
            default:
                Debug.LogError("Preset not found.");
                break;
        }
    }

    public void BuildRandomStore(int seed, float StoreLength, float StoreWidth, float StoreHeight, float ShelfWidth, float ShelfHeight, float ShelfThickness, float ShelfDistance, int ShelfLevel, int division, float variation)
    {
        /*
        // Randomly generate a store layout
        // Lagay minimum and maximum shelf lwh
        // Variation determines how much the store layout can vary, float from 0 to 1

        Random.InitState(seed);
        SpawnRoom(StoreLength, StoreWidth, StoreHeight);
        DivideRoom(StoreLength, StoreWidth, division, 2*(ShelfWidth+ShelfThickness), ShelfDistance);  
        float ShelfLength;

        foreach ((float Length, float Width, float CenterX, float CenterY) subdivision in subdivisions)
        {
            int Randomizer = Random.Range(0, 2);
            if (Randomizer == 0)
            { 
                int Rows = Mathf.FloorToInt(subdivision.Width / (2*(ShelfWidth + ShelfThickness) + ShelfDistance));

                Debug.Log("Rows: " + Rows);
                Debug.Log("Min Length: " + Mathf.FloorToInt(subdivision.Length / (4*(ShelfWidth + ShelfThickness) + ShelfDistance)));
                for (int i = 0; i < Rows; i++)
                {
                    int Gaps = Random.Range(0, Mathf.FloorToInt(subdivision.Length / (4*(ShelfWidth + ShelfThickness) + ShelfDistance)));
                    // Use the variable 'Gaps' or perform some operations here
                    ShelfLength = (subdivision.Length-((2+Gaps)*ShelfDistance))/(Gaps+1);
                    Debug.Log("Row "+ (i+1)+"\nGaps: " + Gaps);
                    Debug.Log("Shelf Length: " + ShelfLength);
                    for (int j = 0; j <= Gaps; j++)

                    {
                        float shelfX = subdivision.CenterX - (subdivision.Length / 2) + j * (ShelfDistance + 2 * (ShelfWidth + ShelfThickness) + ShelfLength - (2 * (ShelfWidth + ShelfThickness))) + ShelfDistance + ShelfWidth + ShelfThickness + (ShelfLength - (2 * (ShelfWidth + ShelfThickness))) / 2;
                        float shelfZ = i * (2 * (ShelfWidth + ShelfThickness) + 1) + (0.5f * (ShelfWidth + ShelfThickness) + 1) - 0.5f;
                        SpawnShelf("Shelf_" + subdivisions.IndexOf(subdivision) + i + j + "_f", shelfX, shelfZ, ShelfLength - (2 * (ShelfWidth + ShelfThickness)), ShelfWidth, ShelfHeight, ShelfThickness, ShelfLevel, 0);
                        SpawnShelf("Shelf_" + subdivisions.IndexOf(subdivision) + i + j + "_b", shelfX, shelfZ + (ShelfWidth + ShelfThickness), ShelfLength - (2 * (ShelfWidth + ShelfThickness)), ShelfWidth, ShelfHeight, ShelfThickness, ShelfLevel, 180);
                        SpawnShelf("Shelf_" + subdivisions.IndexOf(subdivision) + i + j + "_l", shelfX - (ShelfThickness + ShelfLength - (2 * (ShelfWidth + ShelfThickness)) + ShelfWidth) / 2, shelfZ + (ShelfWidth + ShelfThickness) / 2, (ShelfWidth + ShelfThickness) * 2, ShelfWidth, ShelfHeight, ShelfThickness, ShelfLevel, 90);
                        SpawnShelf("Shelf_" + subdivisions.IndexOf(subdivision) + i + j + "_r", shelfX + (ShelfThickness + ShelfLength - (2 * (ShelfWidth + ShelfThickness)) + ShelfWidth) / 2, shelfZ + (ShelfWidth + ShelfThickness) / 2, (ShelfWidth + ShelfThickness) * 2, ShelfWidth, ShelfHeight, ShelfThickness, ShelfLevel, 270);
                    }
                } 
            }
            else if (Randomizer == 1)
            {

                int Rows = Mathf.FloorToInt(subdivision.Length / (2*(ShelfWidth + ShelfThickness) + ShelfDistance));

                Debug.Log("Rows: " + Rows);
                Debug.Log("Min Length: " + Mathf.FloorToInt(subdivision.Width / (4*(ShelfWidth + ShelfThickness) + ShelfDistance)));
                for (int i = 0; i < Rows; i++)
                {
                    int Gaps = Random.Range(0, Mathf.FloorToInt(subdivision.Width / (4*(ShelfWidth + ShelfThickness) + ShelfDistance)));
                    // Use the variable 'Gaps' or perform some operations here
                    ShelfLength = (subdivision.Width-((2+Gaps)*ShelfDistance))/(Gaps+1);
                    Debug.Log("Row "+ (i+1)+"\nGaps: " + Gaps);
                    Debug.Log("Shelf Length: " + ShelfLength);
                    for (int j = 0; j <= Gaps; j++)

                    {
                        float shelfX = subdivision.CenterY - (subdivision.Width / 2) + j * (ShelfDistance + 2 * (ShelfWidth + ShelfThickness) + ShelfLength - (2 * (ShelfWidth + ShelfThickness))) + ShelfDistance + ShelfWidth + ShelfThickness + (ShelfLength - (2 * (ShelfWidth + ShelfThickness))) / 2;
                        float shelfZ = subdivision.CenterX - (subdivision.Length / 2) + i * (2 * (ShelfWidth + ShelfThickness) + 1) + (0.5f * (ShelfWidth + ShelfThickness) + 1) - 0.5f;
                        SpawnShelf("Shelf_" + subdivisions.IndexOf(subdivision) + i + j + "_f", shelfZ, shelfX, ShelfLength - (2 * (ShelfWidth + ShelfThickness)), ShelfWidth, ShelfHeight, ShelfThickness, ShelfLevel, 90);
                        SpawnShelf("Shelf_" + subdivisions.IndexOf(subdivision) + i + j + "_b", shelfZ + (ShelfWidth + ShelfThickness), shelfX, ShelfLength - (2 * (ShelfWidth + ShelfThickness)), ShelfWidth, ShelfHeight, ShelfThickness, ShelfLevel, 270);
                        SpawnShelf("Shelf_" + subdivisions.IndexOf(subdivision) + i + j + "_l", shelfZ + (ShelfWidth + ShelfThickness) / 2, shelfX - (ShelfThickness + ShelfLength - (2 * (ShelfWidth + ShelfThickness)) + ShelfWidth) / 2, (ShelfWidth + ShelfThickness) * 2, ShelfWidth, ShelfHeight, ShelfThickness, ShelfLevel, 0);
                        SpawnShelf("Shelf_" + subdivisions.IndexOf(subdivision) + i + j + "_r", shelfZ + (ShelfWidth + ShelfThickness) / 2, shelfX + (ShelfThickness + ShelfLength - (2 * (ShelfWidth + ShelfThickness)) + ShelfWidth) / 2, (ShelfWidth + ShelfThickness) * 2, ShelfWidth, ShelfHeight, ShelfThickness, ShelfLevel, 180);
                    }
                } 
            }            
        }
        
    */
    }

public void DestroyAllProducts()
    {
        GameObject[] products = GameObject.FindGameObjectsWithTag("Grippable");
        foreach (GameObject product in products)
        {
            Destroy(product);
        }
    }

    public void DestroyAllShelves()
    {
        // Find all GameObjects tagged as "Shelf"
        Shelf[] allShelves = FindObjectsOfType<Shelf>();
        foreach (Shelf shelf in allShelves)
        {
            Destroy(shelf.gameObject);
        }

        // Clear the shelves dictionary
        shelves.Clear();
    }

    public void DestroyRoom()
    {
        // Floor[] allFloors = FindObjectsOfType<Floor>();
        // foreach (Floor floor in allFloors)
        // {
        //     Destroy(floor.gameObject);
        // }
        DestroyAllProducts();
        DestroyAllShelves();
        StoreLength = 0;
        StoreWidth = 0;
        subdivisions.Clear();
    }


    public void SpawnCounter(float StoreLength, float StoreWidth)
    {
        // Choose a corner for the counter space
        float counterLength = 1.8f;
        float counterWidth = 0.6f;
        float counterHeight = 0.85f; // Assuming a standard counter height

        // Choose the bottom-right corner of the room
        Vector3 counterPosition = new Vector3(StoreLength - counterLength / 2, counterHeight / 2, counterWidth / 2);

        // Instantiate the counter
        GameObject counter = Instantiate(Counter, counterPosition, Quaternion.identity);
        counter.transform.localScale = new Vector3(counterLength, counterHeight, counterWidth);
        counter.name = "Counter";
    }
    private void DivideRoom(float length, float width, int division, float MaxShelfWidth, float ShelfDistance)
    {
        subdivisions.Clear(); // Clear existing subdivisions
        subdivisions.Add((length, width, length/2, width/2));
        List<(float, float, float, float)> LuckyList = new List<(float, float, float, float)>(subdivisions);
        for(int i=0; i<division; i++)
        {
            if(LuckyList.Count == 0)
            {
                Debug.Log("\nNo more subdivisions to divide.");
                Debug.Log("\nSubdivisions: " + subdivisions.Count);
            }

            (float, float, float, float) Lucky = LuckyList[Random.Range(0, LuckyList.Count)];
            (float, float, float, float) Lucky1 = (0, 0, 0, 0);
            (float, float, float, float) Lucky2 = (0, 0, 0, 0);
            int randomizer = Random.Range(0, 1);

            if (Lucky.Item1 >= 2*(MaxShelfWidth + 2 * ShelfDistance) && Lucky.Item2 >= 2*(MaxShelfWidth + 2 * ShelfDistance))
            {
                if(randomizer == 0)
                {
                    Lucky1 = (Lucky.Item1/2, Lucky.Item2, Lucky.Item3-Lucky.Item1/4, Lucky.Item4);
                    Lucky2 = (Lucky.Item1/2, Lucky.Item2, Lucky.Item3+Lucky.Item1/4, Lucky.Item4);
                }
                else
                {
                    Lucky1 = (Lucky.Item1, Lucky.Item2/2, Lucky.Item3, Lucky.Item4-Lucky.Item2/4);
                    Lucky2 = (Lucky.Item1, Lucky.Item2/2, Lucky.Item3, Lucky.Item4+Lucky.Item2/4);
                }
            }
            else if (Lucky.Item1 >= 2*(MaxShelfWidth + 2 * ShelfDistance))
            {
                Lucky1 = (Lucky.Item1/2, Lucky.Item2, Lucky.Item3-Lucky.Item1/4, Lucky.Item4);
                Lucky2 = (Lucky.Item1/2, Lucky.Item2, Lucky.Item3+Lucky.Item1/4, Lucky.Item4); 
            }
            else if (Lucky.Item2 >= 2*(MaxShelfWidth + 2 * ShelfDistance))
            {
                Lucky1 = (Lucky.Item1, Lucky.Item2/2, Lucky.Item3, Lucky.Item4-Lucky.Item2/4);
                Lucky2 = (Lucky.Item1, Lucky.Item2/2, Lucky.Item3, Lucky.Item4+Lucky.Item2/4); 
            }

            subdivisions.Add(Lucky1);
            subdivisions.Add(Lucky2);
            subdivisions.Remove(Lucky);

            if(Lucky1.Item1 >= 2*(MaxShelfWidth + 2 * ShelfDistance) || Lucky1.Item2 >= 2*(MaxShelfWidth + 2 * ShelfDistance))
            {
                LuckyList.Add(Lucky1);
                LuckyList.Add(Lucky2);
            }

            LuckyList.Remove(Lucky);

        }
    int counter = 0;
    foreach (var subdivision in subdivisions)
        {
            Debug.Log(counter+$"Subdivision - Length: {subdivision.Item1}, Width: {subdivision.Item2}, CenterX: {subdivision.Item3}, CenterY: {subdivision.Item4}");
            counter++;
        }
    }